{"version":3,"sources":["serviceWorker.js","timerStates.js","components/TimerDisplay.js","components/SetTimer.js","components/TimerButton.js","components/Timer.js","App.js","index.js"],"names":["__webpack_require__","d","__webpack_exports__","unregister","Boolean","window","location","hostname","match","navigator","serviceWorker","ready","then","registration","NOT_SET","leftPad","val","concat","TimerDisplay","props","react_default","a","createElement","className","id","timerState","title","height","src","allow","currentTime","get","SetTimer","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","bind","assertThisInitialized","ev","newBaseTime","baseTime","target","subtract","add","parseInt","value","setBaseTime","htmlFor","type","defaultValue","onChange","Component","TimerButton","getButton","timerStates","onClick","startTimer","stopTimer","Timer","state","moment","duration","timer","reduceTimer","setState","setInterval","clearInterval","newTime","completeTimer","components_TimerDisplay","components_TimerButton","SetTimer_SetTimer","App","Timer_Timer","r","global","react__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_1___default","n","react_dom__WEBPACK_IMPORTED_MODULE_2__","react_dom__WEBPACK_IMPORTED_MODULE_2___default","_App__WEBPACK_IMPORTED_MODULE_3__","_serviceWorker__WEBPACK_IMPORTED_MODULE_5__","jQuery","require","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b1392433.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const NOT_SET = 0;\r\nexport const RUNNING = 1;\r\nexport const COMPLETE = 2;","import React from 'react';\r\nimport * as timerStates from '../timerStates';\r\n\r\nconst leftPad = (val) => {\r\n  if (val < 10) return `0${val}`;\r\n\r\n  return `${val}`;\r\n}\r\n\r\nconst TimerDisplay = (props) => (\r\n  <div>\r\n    <div className=\"row center-block\" id=\"breakDisplay\">\r\n      {\r\n        (props.timerState === timerStates.COMPLETE)\r\n        && <iframe title = \"Break Time\" className=\"center-block youtube-responsive-width\" height=\"315\" src=\"https://www.youtube.com/embed/gVKEM4K8J8A?rel=0;autoplay=1&controls=0&showinfo=0\" allow = \"autoplay\"></iframe>\r\n      }\r\n    </div>\r\n    <div className=\"row\" id = \"timeDisplay\">\r\n      <h2 className=\"text-center\">\r\n        {`${leftPad(props.currentTime.get('hours'))}:${leftPad(props.currentTime.get('minutes'))}:${leftPad(props.currentTime.get('seconds'))}`}\r\n      </h2>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default TimerDisplay;","import React, { Component } from 'react';\r\n\r\nexport default class SetTimer extends Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n  handleChange(ev) {\r\n    const newBaseTime = this.props.baseTime\r\n    if (ev.target.id === 'hours') newBaseTime.subtract(newBaseTime.get('hour'), 'hours').add(parseInt(ev.target.value, 10), 'hours');\r\n    if (ev.target.id === 'minutes') newBaseTime.subtract(newBaseTime.get('minutes'), 'minutes').add(parseInt(ev.target.value, 10), 'minutes');\r\n    if (ev.target.id === 'seconds') newBaseTime.subtract(newBaseTime.get('seconds'), 'seconds').add(parseInt(ev.target.value, 10), 'seconds');\r\n\r\n    this.props.setBaseTime(newBaseTime)\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"row\">\r\n        <h2 className=\"text-primary col-sm-3\">Set<br />Timer</h2>\r\n        <div className=\"form-group col-sm-3\">\r\n            <label htmlFor=\"hours\">Hours</label>\r\n            <input\r\n              id=\"hours\"\r\n              className=\"form-control\"\r\n              type=\"number\"\r\n              defaultValue={this.props.baseTime.get('hours')}\r\n              onChange={this.handleChange}\r\n            />\r\n        </div>\r\n        <div className=\"form-group col-sm-3\">\r\n            <label htmlFor=\"minutes\">Minutes</label>\r\n            <input\r\n              id=\"minutes\"\r\n              className=\"form-control\"\r\n              type=\"number\"\r\n              defaultValue={this.props.baseTime.get('minutes')}\r\n              onChange={this.handleChange}\r\n            />\r\n          </div>\r\n        <div className=\"form-group col-sm-3\">\r\n            <label htmlFor=\"seconds\">Seconds</label>\r\n            <input\r\n              id=\"seconds\"\r\n              className=\"form-control\"\r\n              type=\"number\"\r\n              defaultValue={this.props.baseTime.get('seconds')}\r\n              onChange={this.handleChange}\r\n            />\r\n          </div>\r\n        </div>\r\n    );\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport * as timerStates from '../timerStates';\r\n\r\nclass TimerButton extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.getButton = this.getButton.bind(this);\r\n  }\r\n\r\n  getButton() {\r\n    if (this.props.timerState === timerStates.NOT_SET)\r\n      return (<button className=\"btn btn-success center-block\" onClick={this.props.startTimer}>Start</button>);\r\n\r\n    if (this.props.timerState === timerStates.RUNNING)\r\n      return (<button className=\"btn btn-danger center-block\" onClick={this.props.stopTimer}>Interrupt</button>);\r\n\r\n    if (this.props.timerState === timerStates.COMPLETE)\r\n      return (<button className=\"btn btn-info center-block\" onClick={this.props.stopTimer}>Reset</button>);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"row\">\r\n        {this.getButton()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TimerButton;","import React, { Component } from 'react';\r\nimport TimerDisplay from './TimerDisplay';\r\nimport SetTimer from './SetTimer';\r\nimport moment from 'moment';\r\nimport * as timerStates from '../timerStates'\r\nimport TimerButton from './TimerButton';\r\n\r\nexport default class Timer extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n    \r\n        this.state = {\r\n          currentTime: moment.duration(25, 'minutes'),\r\n          baseTime: moment.duration(25, 'minutes'),\r\n          timerState: timerStates.NOT_SET,\r\n          timer: null,\r\n        };\r\n    \r\n        this.setBaseTime = this.setBaseTime.bind(this);\r\n        this.startTimer = this.startTimer.bind(this);\r\n        this.stopTimer = this.stopTimer.bind(this);\r\n        this.reduceTimer = this.reduceTimer.bind(this);\r\n      }\r\n    \r\n      setBaseTime(newBaseTime) {\r\n        this.setState({\r\n          baseTime: newBaseTime,\r\n          currentTime: newBaseTime,\r\n        });\r\n      }\r\n    \r\n      startTimer() {\r\n        this.setState({\r\n          timerState: timerStates.RUNNING,\r\n          timer: setInterval(this.reduceTimer, 1000)\r\n        });\r\n      }\r\n    \r\n      stopTimer() {\r\n        if (this.state.timer) {\r\n          clearInterval(this.state.timer);\r\n        }\r\n    \r\n        this.setState({\r\n          timerState: timerStates.NOT_SET,\r\n          timer: null,\r\n          currentTime: moment.duration(this.state.baseTime),\r\n        });\r\n      }\r\n    \r\n      reduceTimer() {\r\n        if (this.state.currentTime.get('hours') === 0\r\n              && this.state.currentTime.get('minutes') === 0\r\n              && this.state.currentTime.get('seconds') === 0) {\r\n          this.completeTimer();\r\n          return;\r\n        }\r\n    \r\n        const newTime = moment.duration(this.state.currentTime);\r\n        newTime.subtract(1, 'second');\r\n    \r\n        this.setState({\r\n          currentTime: newTime,\r\n        });\r\n      }\r\n    \r\n      completeTimer() {\r\n        if (this.state.timer) {\r\n          clearInterval(this.state.timer);\r\n        }\r\n    \r\n        this.setState({\r\n          timerState: timerStates.COMPLETE,\r\n          timer: null,\r\n        });\r\n      }\r\n    \r\n      render()\r\n      {\r\n        return (\r\n          <div className=\"container-fluid\">\r\n            <TimerDisplay\r\n              currentTime={this.state.currentTime}\r\n              timerState={this.state.timerState}\r\n            />\r\n            <TimerButton\r\n              startTimer={this.startTimer}\r\n              stopTimer={this.stopTimer}\r\n              timerState={this.state.timerState}/>\r\n            {\r\n              (this.state.timerState !== timerStates.RUNNING)\r\n                &&\r\n                (<SetTimer\r\n                  baseTime={this.state.baseTime}\r\n                  setBaseTime={this.setBaseTime}\r\n                />)\r\n            }\r\n          </div>\r\n        );\r\n      }\r\n}","import React, { Component } from 'react';\nimport './App.css';\nimport Timer from './components/Timer';\n\nexport default class App extends Component {\n  render() {\n    return (\n      <div className=\"panel panel-default app-content center-block\">\n        <div className=\"panel-body\">\n          <Timer />\n        </div>\n      </div>\n    );\n  }\n}\n\n\n//tutorial from https://www.youtube.com/watch?v=3gPbn5LaU_8","/* eslint-disable import/first */\nglobal.jQuery = require('jquery')\nrequire('bootstrap')\nimport 'bootstrap/dist/css/bootstrap.css'\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}